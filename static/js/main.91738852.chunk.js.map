{"version":3,"sources":["UsersList.js","App.js","registerServiceWorker.js","index.js"],"names":["UsersList","users","userSelected","length","map","user","onClick","bind","key","allUsers","App","filterUsers","e","text","currentTarget","value","filteredUsers","getFilteredUsersForText","setState","selectedUser","onUserSelected","state","filter","toLowerCase","includes","this","onInput","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4PAgBeA,EAdG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACxB,OAAID,EAAME,OAAS,EAEX,0BACKF,EAAMG,KAAI,SAAAC,GAAI,OAAI,sBAAIC,QAASJ,EAAaK,KAAK,KAAMF,GAAOG,IAAKH,GAAOA,OAMnF,yCCPFI,EAAW,CAAC,SAAU,QAAS,QAAS,QAAS,QAAS,QA0CjDC,E,YAvCX,aAAe,IAAD,8BACV,+CAQJC,YAAc,SAACC,GACX,IAAMC,EAAOD,EAAEE,cAAcC,MACvBC,EAAgB,EAAKC,wBAAwBJ,GACnD,EAAKK,SAAS,CACVF,gBACAG,aAAc,QAdR,EAsBdC,eAAiB,SAACD,GACd,EAAKD,SAAS,CACVC,kBArBJ,EAAKE,MAAQ,CACTL,cAAeP,EACfU,aAAc,MALR,E,qFAkBUN,GACpB,OAAOJ,EAASa,QAAO,SAAAjB,GAAI,OAAIA,EAAKkB,cAAcC,SAASX,EAAKU,oB,+BAUhE,OACI,2BACKE,KAAKJ,MAAMF,aACZ,yBAAOO,QAASD,KAAKd,cACrB,gBAAC,EAAD,CAAWT,aAAcuB,KAAKL,eAAgBnB,MAAOwB,KAAKJ,MAAML,qB,GAlC9DW,aCGZC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTI,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBrB,QACbe,UAAUC,cAAcQ,WAKxBC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/BC,OAAM,SAAAC,GACHH,QAAQG,MAAM,4CAA6CA,MCzEvEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACX,GAA6C,kBAAmBjB,UAAW,CAGvE,GADkB,IAAIkB,IAAIC,SAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIrC,OAGJ1B,OAAO2B,iBAAiB,QAAQ,WAC5B,IAAMtB,EAAK,UAAMoB,SAAN,sBAEP3B,IAiDhB,SAAiCO,GAE7BuB,MAAMvB,GACDI,MAAK,SAAAoB,GAGsB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GAC/BA,EAAayB,aAAa1B,MAAK,WAC3BT,OAAOC,SAASmC,eAKxBhC,EAAgBC,MAGvBa,OAAM,WACHF,QAAQC,IACJ,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WAC/BO,QAAQC,IACJ,gHAMRb,EAAgBC,OCzChCiC,I","file":"static/js/main.91738852.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nconst UsersList = ({ users, userSelected }) => {\r\n    if (users.length > 0) {\r\n        return (\r\n            <ul>\r\n                {users.map(user => <li onClick={userSelected.bind(null, user)} key={user}>{user}</li>)}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <p>No results!</p>\r\n    );\r\n};\r\n\r\nexport default UsersList;","import * as React from 'react';\nimport UsersList from './UsersList'\n\n// z braku laku istniających userów definiuję po prostu jako stałą\n// w prawdziwej aplikacji pochodziliby z API i/lub byli w Reduksowym storze\nconst allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            filteredUsers: allUsers,\n            selectedUser: null\n        };\n    }\n\n    filterUsers = (e) => {\n        const text = e.currentTarget.value;\n        const filteredUsers = this.getFilteredUsersForText(text)\n        this.setState({\n            filteredUsers,\n            selectedUser: null\n        })\n    }\n\n    getFilteredUsersForText(text) {\n        return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n    }\n\n    onUserSelected = (selectedUser) => {\n        this.setState({\n            selectedUser\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.selectedUser}\n                <input onInput={this.filterUsers} />\n                <UsersList userSelected={this.onUserSelected} users={this.state.filteredUsers} />\n            </div>\n        );\n    }\n};\n\nexport default App;\n\n\n// import React from 'react';\n// // import logo from './logo.svg';\n// import './App.css';\n// import ReactDOM from \"react-dom\";\n//\n//\n// const allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n//\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//\n//     this.state = {\n//       filteredUsers: allUsers,\n//       selectedUser: null\n//     };\n//   }\n//\n//   filterUsers = (e) => {\n//     const text = e.currentTarget.value;\n//     const filteredUsers = this.getFilteredUsersForText(text)\n//     this.setState({\n//       filteredUsers\n//     });\n//   }\n//\n//   getFilteredUsersForText = (text) => {\n//     return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n//   }\n//\n//   onUserSelected = (selectedUser) => {\n//     this.setState({\n//       selectedUser\n//     });\n//   }\n//\n//   render () {\n//     return (\n//         <div>\n//           {this.state.selectedUser}\n//           <input onInput={this.filterUsers} />\n//           <UsersList userSelected={this.onUserSelected} users={this.state.filteredUsers} />\n//         </div>\n//     );\n//   }\n// };\n//\n// const UsersList = ({ users }) => {\n//   if (users.length > 0) {\n//     return (\n//         <ul>\n//           {users.map(user => <li onClick={userSelected.bind(null, user)} key={user}>{user}</li>)}\n//         </ul>\n//     );\n//   }\n//\n//   return (\n//       <p>No results!</p>\n//   );\n// };\n//\n// export default App;\n\n// function AppHeader() {\n//   return (\n//       <header className=\"ui fixed menu\">\n//         <nav className=\"ui container\">\n//           <a href=\"#\" className=\"header item\">\n//             <img\n//                 className=\"logo\"\n//                 src=\"https://typeofweb.com/wp-content/uploads/2017/08/cropped-typeofweb_logo-04-white-smaller-1-e1504359870362.png\"\n//             />\n//             Lista kontaktów\n//           </a>\n//           <div className=\"header item\">\n//             <button className=\"ui button\">Dodaj</button>\n//           </div>\n//         </nav>\n//       </header>\n//   );\n// }\n//\n// export class ContactsList extends React.Component {\n//   contactToContactItem = contact => {\n//     const avatarUrl = contact.picture.thumbnail;\n//     const { title, first, last } = contact.name;\n//     const name = `${title} ${first} ${last}`.trim();\n//     const phone = contact.phone;\n//     return <ContactItem key={key} avatarUrl={avatarUrl} name={name} phone={phone} />;\n//   };\n//\n//   render() {\n//     return (\n//         <ul className=\"ui relaxed divided list selection\">\n//           {this.props.contacts.map(this.contactToContactItem)}\n//         </ul>\n//     );\n//   }\n// }\n//\n// export const ContactItem = ({ avatarUrl, name, phone }) => {\n//   return (\n//       <li className=\"item\">\n//         <img src={avatarUrl} className=\"ui mini rounded image\" alt=\"\" />\n//         <div className=\"content\">\n//           <h4 className=\"header\">{name}</h4>\n//           <div className=\"description\">{phone}</div>\n//         </div>\n//       </li>\n//   );\n// };\n//\n// export class App extends React.Component {\n//   state = {\n//     contacts: []\n//   };\n//\n//   componentDidMount() {\n//     fetch(\"https://randomuser.me/api/?format=json&results=10\")\n//         .then(res => res.json())\n//         .then(json => this.setState({ contacts: json.results }));\n//   }\n//\n//   render() {\n//     return (\n//         <div>\n//           <AppHeader />\n//           <main className=\"ui main text container\">\n//             <ContactsList contacts={this.state.contacts} />\n//           </main>\n//         </div>\n//     );\n//   }\n// }\n//\n// export default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}