{"version":3,"sources":["ContactItem.jsx","ContactsList.jsx","AppHeader.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["ContactItem","avatarUrl","name","phone","className","src","alt","ContactsList","contactToContactItem","contact","picture","thumbnail","title","first","last","trim","key","login","username","this","props","contacts","map","React","AppHeader","href","App","state","fetch","then","res","json","setState","results","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4PAEaA,EAAc,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC3C,OACI,sBAAIC,UAAU,QACV,uBAAKC,IAAKJ,EAAWG,UAAU,wBAAwBE,IAAI,KAC3D,uBAAKF,UAAU,WACX,sBAAIA,UAAU,UAAUF,GACxB,uBAAKE,UAAU,eAAeD,MCLjCI,EAAb,2MACIC,qBAAuB,SAAAC,GACnB,IAAMR,EAAYQ,EAAQC,QAAQC,UADJ,EAECF,EAAQP,KAA/BU,EAFsB,EAEtBA,MAAOC,EAFe,EAEfA,MAAOC,EAFQ,EAERA,KAChBZ,EAAO,UAAGU,EAAH,YAAYC,EAAZ,YAAqBC,GAAOC,OACnCZ,EAAQM,EAAQN,MAChBa,EAAMP,EAAQQ,MAAMC,SAC1B,OAAO,gBAAC,EAAD,CAAaF,IAAKA,EAAKf,UAAWA,EAAWC,KAAMA,EAAMC,MAAOA,KAP/E,wEAWQ,OACI,sBAAIC,UAAU,qCACTe,KAAKC,MAAMC,SAASC,IAAIH,KAAKX,2BAb9C,GAAkCe,aCmBnBC,EApBU,WACrB,OACI,0BAAQpB,UAAU,iBACd,uBAAKA,UAAU,gBACX,qBAAGqB,KAAK,IAAIrB,UAAU,eAClB,uBACIA,UAAU,OACVC,IAAI,gHACJC,IAAI,SAJZ,sBAQA,uBAAKF,UAAU,eACX,0BAAQA,UAAU,aAAlB,aCeLsB,EAzBf,2MACIC,MAAQ,CACJN,SAAU,MAFlB,mFAKyB,IAAD,OAChBO,MAAM,qDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAAEX,SAAUU,EAAKE,eARzD,+BAYQ,IAAMZ,EAAWF,KAAKQ,MAAMN,SAE5B,OACI,2BACI,gBAAC,EAAD,MACA,wBAAMjB,UAAU,0BACXiB,EAAW,gBAAC,EAAD,CAAcA,SAAUA,IAAe,6BAlBvE,GAAyBE,aCKnBW,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTZ,MAAK,SAAAgB,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBpB,QACbe,UAAUC,cAAcO,WAKxBC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/BC,OAAM,SAAAC,GACHH,QAAQG,MAAM,4CAA6CA,MCzEvEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACX,GAA6C,kBAAmBhB,UAAW,CAGvE,GADkB,IAAIiB,IAAIC,SAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIrC,OAGJzB,OAAO0B,iBAAiB,QAAQ,WAC5B,IAAMrB,EAAK,UAAMmB,SAAN,sBAEP1B,IAiDhB,SAAiCO,GAE7Bb,MAAMa,GACDZ,MAAK,SAAAkC,GAGsB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvC,MAAK,SAAAgB,GAC/BA,EAAawB,aAAaxC,MAAK,WAC3BO,OAAOC,SAASiC,eAKxB9B,EAAgBC,MAGvBY,OAAM,WACHF,QAAQC,IACJ,oEArEAmB,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMvC,MAAK,WAC/BsB,QAAQC,IACJ,gHAMRZ,EAAgBC,OCzChC+B,I","file":"static/js/main.069594f8.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nexport const ContactItem = ({ avatarUrl, name, phone }) => {\r\n    return (\r\n        <li className=\"item\">\r\n            <img src={avatarUrl} className=\"ui mini rounded image\" alt=\"\" />\r\n            <div className=\"content\">\r\n                <h4 className=\"header\">{name}</h4>\r\n                <div className=\"description\">{phone}</div>\r\n            </div>\r\n        </li>\r\n    );\r\n};","import * as React from \"react\";\r\nimport { ContactItem } from \"./ContactItem\";\r\n\r\nexport class ContactsList extends React.Component {\r\n    contactToContactItem = contact => {\r\n        const avatarUrl = contact.picture.thumbnail;\r\n        const { title, first, last } = contact.name;\r\n        const name = `${title} ${first} ${last}`.trim();\r\n        const phone = contact.phone;\r\n        const key = contact.login.username;\r\n        return <ContactItem key={key} avatarUrl={avatarUrl} name={name} phone={phone} />;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"ui relaxed divided list selection\">\r\n                {this.props.contacts.map(this.contactToContactItem)}\r\n            </ul>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport const AppHeader = () => {\r\n    return (\r\n        <header className=\"ui fixed menu\">\r\n            <nav className=\"ui container\">\r\n                <a href=\"#\" className=\"header item\">\r\n                    <img\r\n                        className=\"logo\"\r\n                        src=\"https://typeofweb.com/wp-content/uploads/2017/08/cropped-typeofweb_logo-04-white-smaller-1-e1504359870362.png\"\r\n                        alt=\"logo\"\r\n                    />\r\n                    Lista kontaktów\r\n                </a>\r\n                <div className=\"header item\">\r\n                    <button className=\"ui button\">Dodaj</button>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default AppHeader;","import * as React from 'react';\n// import UsersList from './UsersList'\nimport { ContactsList } from \"./ContactsList\";\nimport AppHeader  from \"./AppHeader\";\n\nexport class App extends React.Component {\n    state = {\n        contacts: null\n    };\n\n    componentDidMount() {\n        fetch(\"https://randomuser.me/api/?format=json&results=10\")\n            .then(res => res.json())\n            .then(json => this.setState({ contacts: json.results }));\n    }\n\n    render() {\n        const contacts = this.state.contacts;\n\n        return (\n            <div>\n                <AppHeader />\n                <main className=\"ui main text container\">\n                    {contacts ? <ContactsList contacts={contacts} /> : 'Ładowanie…'}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n// z braku laku istniających userów definiuję po prostu jako stałą\n// w prawdziwej aplikacji pochodziliby z API i/lub byli w Reduksowym storze\n// const allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n//\n// class App extends React.Component {\n//     constructor() {\n//         super();\n//\n//         this.state = {\n//             filteredUsers: allUsers,\n//             selectedUser: null\n//         };\n//     }\n//\n//     filterUsers = (e) => {\n//         const text = e.currentTarget.value;\n//         const filteredUsers = this.getFilteredUsersForText(text)\n//         this.setState({\n//             filteredUsers,\n//             selectedUser: null\n//         })\n//     }\n//\n//     getFilteredUsersForText(text) {\n//         return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n//     }\n//\n//     onUserSelected = (selectedUser) => {\n//         this.setState({\n//             selectedUser\n//         });\n//     }\n//\n//     render() {\n//         return (\n//             <div>\n//                 {this.state.selectedUser}\n//                 <input onInput={this.filterUsers} />\n//                 <UsersList userSelected={this.onUserSelected} users={this.state.filteredUsers} />\n//             </div>\n//         );\n//     }\n// };\n//\n// export default App;\n\n\n// import React from 'react';\n// // import logo from './logo.svg';\n// import './App.css';\n// import ReactDOM from \"react-dom\";\n//\n//\n// const allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n//\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//\n//     this.state = {\n//       filteredUsers: allUsers,\n//       selectedUser: null\n//     };\n//   }\n//\n//   filterUsers = (e) => {\n//     const text = e.currentTarget.value;\n//     const filteredUsers = this.getFilteredUsersForText(text)\n//     this.setState({\n//       filteredUsers\n//     });\n//   }\n//\n//   getFilteredUsersForText = (text) => {\n//     return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n//   }\n//\n//   onUserSelected = (selectedUser) => {\n//     this.setState({\n//       selectedUser\n//     });\n//   }\n//\n//   render () {\n//     return (\n//         <div>\n//           {this.state.selectedUser}\n//           <input onInput={this.filterUsers} />\n//           <UsersList userSelected={this.onUserSelected} users={this.state.filteredUsers} />\n//         </div>\n//     );\n//   }\n// };\n//\n// const UsersList = ({ users }) => {\n//   if (users.length > 0) {\n//     return (\n//         <ul>\n//           {users.map(user => <li onClick={userSelected.bind(null, user)} key={user}>{user}</li>)}\n//         </ul>\n//     );\n//   }\n//\n//   return (\n//       <p>No results!</p>\n//   );\n// };\n//\n// export default App;\n\n// function AppHeader() {\n//   return (\n//       <header className=\"ui fixed menu\">\n//         <nav className=\"ui container\">\n//           <a href=\"#\" className=\"header item\">\n//             <img\n//                 className=\"logo\"\n//                 src=\"https://typeofweb.com/wp-content/uploads/2017/08/cropped-typeofweb_logo-04-white-smaller-1-e1504359870362.png\"\n//             />\n//             Lista kontaktów\n//           </a>\n//           <div className=\"header item\">\n//             <button className=\"ui button\">Dodaj</button>\n//           </div>\n//         </nav>\n//       </header>\n//   );\n// }\n//\n// export class ContactsList extends React.Component {\n//   contactToContactItem = contact => {\n//     const avatarUrl = contact.picture.thumbnail;\n//     const { title, first, last } = contact.name;\n//     const name = `${title} ${first} ${last}`.trim();\n//     const phone = contact.phone;\n//     return <ContactItem key={key} avatarUrl={avatarUrl} name={name} phone={phone} />;\n//   };\n//\n//   render() {\n//     return (\n//         <ul className=\"ui relaxed divided list selection\">\n//           {this.props.contacts.map(this.contactToContactItem)}\n//         </ul>\n//     );\n//   }\n// }\n//\n// export const ContactItem = ({ avatarUrl, name, phone }) => {\n//   return (\n//       <li className=\"item\">\n//         <img src={avatarUrl} className=\"ui mini rounded image\" alt=\"\" />\n//         <div className=\"content\">\n//           <h4 className=\"header\">{name}</h4>\n//           <div className=\"description\">{phone}</div>\n//         </div>\n//       </li>\n//   );\n// };\n//\n// export class App extends React.Component {\n//   state = {\n//     contacts: []\n//   };\n//\n//   componentDidMount() {\n//     fetch(\"https://randomuser.me/api/?format=json&results=10\")\n//         .then(res => res.json())\n//         .then(json => this.setState({ contacts: json.results }));\n//   }\n//\n//   render() {\n//     return (\n//         <div>\n//           <AppHeader />\n//           <main className=\"ui main text container\">\n//             <ContactsList contacts={this.state.contacts} />\n//           </main>\n//         </div>\n//     );\n//   }\n// }\n//\n// export default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}